// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillyServiceClient is the client API for BillyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillyServiceClient interface {
	FileDescriptor(ctx context.Context, opts ...grpc.CallOption) (BillyService_FileDescriptorClient, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error)
	MkdirAll(ctx context.Context, in *MkdirAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Lchown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Chtimes(ctx context.Context, in *ChtimesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Lstat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
	Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error)
}

type billyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillyServiceClient(cc grpc.ClientConnInterface) BillyServiceClient {
	return &billyServiceClient{cc}
}

func (c *billyServiceClient) FileDescriptor(ctx context.Context, opts ...grpc.CallOption) (BillyService_FileDescriptorClient, error) {
	stream, err := c.cc.NewStream(ctx, &BillyService_ServiceDesc.Streams[0], "/BillyService/FileDescriptor", opts...)
	if err != nil {
		return nil, err
	}
	x := &billyServiceFileDescriptorClient{stream}
	return x, nil
}

type BillyService_FileDescriptorClient interface {
	Send(*FileDescriptorRequest) error
	Recv() (*FileDescriptorResponse, error)
	grpc.ClientStream
}

type billyServiceFileDescriptorClient struct {
	grpc.ClientStream
}

func (x *billyServiceFileDescriptorClient) Send(m *FileDescriptorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *billyServiceFileDescriptorClient) Recv() (*FileDescriptorResponse, error) {
	m := new(FileDescriptorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *billyServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/BillyService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Rename", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...grpc.CallOption) (*ReadDirResponse, error) {
	out := new(ReadDirResponse)
	err := c.cc.Invoke(ctx, "/BillyService/ReadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) MkdirAll(ctx context.Context, in *MkdirAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/MkdirAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Chmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Lchown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Lchown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Chown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Chtimes(ctx context.Context, in *ChtimesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Chtimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Lstat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/BillyService/Lstat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/BillyService/Symlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billyServiceClient) Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error) {
	out := new(ReadlinkResponse)
	err := c.cc.Invoke(ctx, "/BillyService/Readlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillyServiceServer is the server API for BillyService service.
// All implementations must embed UnimplementedBillyServiceServer
// for forward compatibility
type BillyServiceServer interface {
	FileDescriptor(BillyService_FileDescriptorServer) error
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	Rename(context.Context, *RenameRequest) (*emptypb.Empty, error)
	Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error)
	ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error)
	MkdirAll(context.Context, *MkdirAllRequest) (*emptypb.Empty, error)
	Chmod(context.Context, *ChmodRequest) (*emptypb.Empty, error)
	Lchown(context.Context, *ChownRequest) (*emptypb.Empty, error)
	Chown(context.Context, *ChownRequest) (*emptypb.Empty, error)
	Chtimes(context.Context, *ChtimesRequest) (*emptypb.Empty, error)
	Lstat(context.Context, *StatRequest) (*StatResponse, error)
	Symlink(context.Context, *SymlinkRequest) (*emptypb.Empty, error)
	Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error)
	mustEmbedUnimplementedBillyServiceServer()
}

// UnimplementedBillyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBillyServiceServer struct {
}

func (UnimplementedBillyServiceServer) FileDescriptor(BillyService_FileDescriptorServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDescriptor not implemented")
}
func (UnimplementedBillyServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedBillyServiceServer) Rename(context.Context, *RenameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedBillyServiceServer) Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedBillyServiceServer) ReadDir(context.Context, *ReadDirRequest) (*ReadDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDir not implemented")
}
func (UnimplementedBillyServiceServer) MkdirAll(context.Context, *MkdirAllRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkdirAll not implemented")
}
func (UnimplementedBillyServiceServer) Chmod(context.Context, *ChmodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedBillyServiceServer) Lchown(context.Context, *ChownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lchown not implemented")
}
func (UnimplementedBillyServiceServer) Chown(context.Context, *ChownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedBillyServiceServer) Chtimes(context.Context, *ChtimesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chtimes not implemented")
}
func (UnimplementedBillyServiceServer) Lstat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lstat not implemented")
}
func (UnimplementedBillyServiceServer) Symlink(context.Context, *SymlinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Symlink not implemented")
}
func (UnimplementedBillyServiceServer) Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readlink not implemented")
}
func (UnimplementedBillyServiceServer) mustEmbedUnimplementedBillyServiceServer() {}

// UnsafeBillyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillyServiceServer will
// result in compilation errors.
type UnsafeBillyServiceServer interface {
	mustEmbedUnimplementedBillyServiceServer()
}

func RegisterBillyServiceServer(s grpc.ServiceRegistrar, srv BillyServiceServer) {
	s.RegisterService(&BillyService_ServiceDesc, srv)
}

func _BillyService_FileDescriptor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BillyServiceServer).FileDescriptor(&billyServiceFileDescriptorServer{stream})
}

type BillyService_FileDescriptorServer interface {
	Send(*FileDescriptorResponse) error
	Recv() (*FileDescriptorRequest, error)
	grpc.ServerStream
}

type billyServiceFileDescriptorServer struct {
	grpc.ServerStream
}

func (x *billyServiceFileDescriptorServer) Send(m *FileDescriptorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *billyServiceFileDescriptorServer) Recv() (*FileDescriptorRequest, error) {
	m := new(FileDescriptorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BillyService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_ReadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).ReadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/ReadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).ReadDir(ctx, req.(*ReadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_MkdirAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).MkdirAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/MkdirAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).MkdirAll(ctx, req.(*MkdirAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Chmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Chmod(ctx, req.(*ChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Lchown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Lchown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Lchown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Lchown(ctx, req.(*ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Chown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Chown(ctx, req.(*ChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Chtimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChtimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Chtimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Chtimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Chtimes(ctx, req.(*ChtimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Lstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Lstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Lstat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Lstat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Symlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Symlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Symlink(ctx, req.(*SymlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillyService_Readlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillyServiceServer).Readlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BillyService/Readlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillyServiceServer).Readlink(ctx, req.(*ReadlinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillyService_ServiceDesc is the grpc.ServiceDesc for BillyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BillyService",
	HandlerType: (*BillyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stat",
			Handler:    _BillyService_Stat_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _BillyService_Rename_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _BillyService_Remove_Handler,
		},
		{
			MethodName: "ReadDir",
			Handler:    _BillyService_ReadDir_Handler,
		},
		{
			MethodName: "MkdirAll",
			Handler:    _BillyService_MkdirAll_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _BillyService_Chmod_Handler,
		},
		{
			MethodName: "Lchown",
			Handler:    _BillyService_Lchown_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _BillyService_Chown_Handler,
		},
		{
			MethodName: "Chtimes",
			Handler:    _BillyService_Chtimes_Handler,
		},
		{
			MethodName: "Lstat",
			Handler:    _BillyService_Lstat_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _BillyService_Symlink_Handler,
		},
		{
			MethodName: "Readlink",
			Handler:    _BillyService_Readlink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileDescriptor",
			Handler:       _BillyService_FileDescriptor_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "billy.proto",
}
